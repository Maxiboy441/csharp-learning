
Microsoft Visual Studio Solution File, Format Version 12.00
# Visual Studio Version 17
VisualStudioVersion = 17.4.33213.308
MinimumVisualStudioVersion = 10.0.40219.1
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Projekt", "Projekt\Projekt.csproj", "{F9A034C5-2B96-47BA-A4A5-6BB5E03A4772}"
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|Any CPU = Debug|Any CPU
		Release|Any CPU = Release|Any CPU
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{F9A034C5-2B96-47BA-A4A5-6BB5E03A4772}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{F9A034C5-2B96-47BA-A4A5-6BB5E03A4772}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{F9A034C5-2B96-47BA-A4A5-6BB5E03A4772}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{F9A034C5-2B96-47BA-A4A5-6BB5E03A4772}.Release|Any CPU.Build.0 = Release|Any CPU
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
	GlobalSection(ExtensibilityGlobals) = postSolution
		SolutionGuid = {4CE6D7DD-02F7-4249-98A9-06EB3627E3B3}
	EndGlobalSection
EndGlobal



// Zahlenblock einfügen / entfernen
foreach (string datei in dateien)
{
    string dateiname = Path.GetFileNameWithoutExtension(datei);

    // Überprüfen, ob der Dateiname mit "Renamer" beginnt
    if (dateiname.StartsWith("Renamer"))
    {
        // Überprüfen, ob der Dateiname einen Zahlenblock enthält
        if (dateiname.Contains("-"))
        {
            // Aufteilen des Dateinamens inzwei Teile anhand des "-"
            string[] parts = dateiname.Split('-');
            if (parts.Length == 2)
            {
                // Prüfen, ob der erste Teil des Dateinamens eine Zahl ist
                int zahl;
                if (int.TryParse(parts[0], out zahl))
                {
                    // Generieren des neuen Dateinamens mit/ohne Zahlenblock
                    string newFileName = parts[1] + Path.GetExtension(datei);

                    // Umbenennen der Datei
                    File.Move(datei, Path.Combine(pfad, newFileName));
                }
            }
        }
        else
        {
            // Generieren des neuen Dateinamens mit Zahlenblock
            string newFileName = "1-" + dateiname + Path.GetExtension(datei);

            // Umbenennen der Datei
            File.Move(datei, Path.Combine(pfad, newFileName));
        }
    }
}//Führende null 
foreach (string datei in dateien)
{
    string dateiname = Path.GetFileNameWithoutExtension(datei);
    // Prüfen, ob der Dateiname mit "1-" beginnt
    if (dateiname.StartsWith("1-"))
    {
        // Führende Nullen einführen, indem Leerzeichen mit Nullen aufgefüllt werden
        string neuerName = dateiname.Substring(3).PadLeft(3, '0');
        // "1-" am Anfang des Dateinamens hinzufügen
        neuerName = neuerName.Insert(0, "1-");
        neuerName += Path.GetExtension(datei);
        File.Move(datei, Path.Combine(pfad, neuerName));
    }
    // Prüfen, ob der Dateiname mit "001-" beginnt
    else if (dateiname.StartsWith("001-"))
    {
        // Führende Nullen entfernen, indem Leerzeichen links abgeschnitten werden
        string neuerName = dateiname.Substring(4).TrimStart('0');
        // "1-" am Anfang des Dateinamens hinzufügen
        neuerName = neuerName.Insert(0, "1-");
        neuerName += Path.GetExtension(datei);
        File.Move(datei, Path.Combine(pfad, neuerName));
    }
}


 // Unit test Führende null 
 using System;
using System.IO;
using NUnit.Framework;

[TestFixture]
public class DateiUmbenennungsTests
{
    private string testVerzeichnis;

    [SetUp]
    public void SetUp()
    {
        // Erstelle ein temporäres Testverzeichnis
        testVerzeichnis = Path.Combine(Path.GetTempPath(), "Testverzeichnis");
        Directory.CreateDirectory(testVerzeichnis);

        // Erstelle einige Testdateien
        File.WriteAllText(Path.Combine(testVerzeichnis, "RenamerFile1.txt"), "");
        File.WriteAllText(Path.Combine(testVerzeichnis, "RenamerFile2.txt"), "");
        File.WriteAllText(Path.Combine(testVerzeichnis, "001-RenamerFile3.txt"), "");
    }

    [TearDown]
    public void TearDown()
    {
        // Lösche das Testverzeichnis und alle enthaltenen Dateien
        Directory.Delete(testVerzeichnis, true);
    }

    [Test]
    public void TestFuehrendeNullEinfuegen()
    {
        // Überprüfen, ob eine führende Null eingefügt wird

        // Datei ohne führende Null erstellen
        File.Move(Path.Combine(testVerzeichnis, "RenamerFile1.txt"), Path.Combine(testVerzeichnis, "1-RenamerFile.txt"));

        // Datei umbenennen
        Programm.Umbenennen(testVerzeichnis);

        // Überprüfen, ob eine führende Null eingefügt wurde
        Assert.True(File.Exists(Path.Combine(testVerzeichnis, "001-RenamerFile.txt")));
    }

    [Test]
    public void TestFuehrendeNullEntfernen()
    {
        // Überprüfen, ob eine führende Null entfernt wird

        // Datei mit führender Null erstellen
        File.Move(Path.Combine(testVerzeichnis, "001-RenamerFile3.txt"), Path.Combine(testVerzeichnis, "1-RenamerFile.txt"));

        // Datei umbenennen
        Programm.Umbenennen(testVerzeichnis);

        // Überprüfen, ob die führende Null entfernt wurde
        Assert.True(File.Exists(Path.Combine(testVerzeichnis, "1-RenamerFile.txt")));
    }
}

//Unit test Zahlung block 
using System;
using System.IO;
using NUnit.Framework;

[TestFixture]
public class DateiUmbenennungsTests
{
    private string testVerzeichnis;

    [SetUp]
    public void SetUp()
    {
        // Erstelle ein temporäres Testverzeichnis
        testVerzeichnis = Path.Combine(Path.GetTempPath(), "Testverzeichnis");
        Directory.CreateDirectory(testVerzeichnis);

        // Erstelle einige Testdateien
        File.WriteAllText(Path.Combine(testVerzeichnis, "RenamerFile1.txt"), "");
        File.WriteAllText(Path.Combine(testVerzeichnis, "RenamerFile2.txt"), "");
        File.WriteAllText(Path.Combine(testVerzeichnis, "001-RenamerFile3.txt"), "");
    }

    [TearDown]
    public void TearDown()
    {
        // Lösche das Testverzeichnis und alle enthaltenen Dateien
        Directory.Delete(testVerzeichnis, true);
    }

    [Test]
    public void TestFuehrendeNullEinfuegen()
    {
        // Überprüfen, ob eine führende Null eingefügt wird

        // Datei ohne führende Null erstellen
        File.Move(Path.Combine(testVerzeichnis, "RenamerFile1.txt"), Path.Combine(testVerzeichnis, "1-RenamerFile.txt"));

        // Datei umbenennen
        Programm.Umbenennen(testVerzeichnis);

        // Überprüfen, ob eine führende Null eingefügt wurde
        Assert.True(File.Exists(Path.Combine(testVerzeichnis, "001-RenamerFile.txt")));
    }

    [Test]
    public void TestFuehrendeNullEntfernen()
    {
        // Überprüfen, ob eine führende Null entfernt wird

        // Datei mit führender Null erstellen
        File.Move(Path.Combine(testVerzeichnis, "001-RenamerFile3.txt"), Path.Combine(testVerzeichnis, "1-RenamerFile.txt"));

        // Datei umbenennen
        Programm.Umbenennen(testVerzeichnis);

        // Überprüfen, ob die führende Null entfernt wurde
        Assert.True(File.Exists(Path.Combine(testVerzeichnis, "1-RenamerFile.txt")));
    }
}
